[pytest]
log_cli = 1
log_cli_level = INFO
log_cli_format = %(message)s

log_file = pytest.log
log_file_level = INFO
log_file_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
log_file_date_format= %Y-%m-%d %H:%M:%S

markers =
    tc1: test case #1 (Register user)
    tc2: test case #2 (Login User with correct email and password)
    tc3: test case #3 (Login User with incorrect email and password)
    tc4: test case #4 (Logout user)
    regression: regression suite

# Execute test and generate report, then open report:
# 1. pytest -m tc1 --html=reports\report.html || pytest -v --browser=firefox --html=reports\report.html
# 2. cd reports
# 3. python read_report.py

# README.md
# 1. git clone <repo link>
# 2. Install and activate virtual environment. Check more here https://www.jetbrains.com/help/pycharm/creating-virtual-environment.html
# 3. Set Python interpreter in Settings > Python Interpreter > select dropdown > choose <path_to_your_local_project_folder>
# 4. Navigate to the folder where is 'requirements.txt' module
# 5. Run 'pip install -r requirements.txt'
# 6. Check Installed libraries with 'pip list' command
# 7. Run 'pytest -v tc1' from root folder to check if everything works fine

# Project allows to run tests in parallel with headless/headed mode using passed browser name
# and version (desktop or mobile/tablet) with 'pytest -m=regression -n=2 -v --browser=chrome --headless=true' command

# Run all the tests in parallel from root folder 'pytest -v -n=3 --browser=edge --headless=true'
# Note! If there are more CPU's set than test modules with opened  browsers are launched => tests may fail unexpectedly.

# Generate reports with:
# pytest -v -n=3 --browser=edge --headless=false --html=reports\edge_report.html
# pytest -v -n=3 --browser=chrome --headless=false --html=reports\chrome_report.html
# pytest -v -n=3 --browser=firefox --headless=false --html=reports\firefox_report.html

# Parametrize tests:
# https://stackoverflow.com/questions/51739589/how-to-share-parametrized-arguments-across-multiple-test-functions

# Test ordering plugin https://github.com/pytest-dev/pytest-order

# pytest -m tc1 --browser=chrome --headless=false --html=reports\chrome_report.html
